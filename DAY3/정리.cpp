// 정리
// 객체지향 디자인의 
// 
// 핵심 #1. 공통성과 가변성의 분리
// => 변하지 않은 코드에서 변하는 부분은 분리되어야 한다
// => template method, strategy, policy base design

// 핵심 #2. 공통의 기반 클래스를 만드는 경우가 많다.
// => Folder 는 File 을 보관하지만 Folder도 보관
//    Folder 과 File 는 공통의 기반 클래스 필요 => composite

// => FileStream 에 압축기능을 추가하고, 다시 암호화 기능도 추가
//    "decorator"

// 핵심 #3. 어떤 문제를 해결하기 위해 "중간층(간접층)"을 도입하는 것

// 사용자 =============================================> FileStream
// 사용자 =============================================> std::list
// 사용자 =============================================> IMP3
// 사용자 =============================================> Socket, IPAddress
// 사용자 =============================================> 계산기서버