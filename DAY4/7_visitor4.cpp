// 방문자 패턴의 의미!!
class Shape
{
	virtual void Draw() = 0;
	virtual void Move() = 0; // 가상함수 추가!
};
class Rect   : public Shape {};
class Circle : public Shape {};


// 전통적인 객체지향 디자인
// => ? 자리에 "쉽다"  "어렵다" 로 채워 보세요.
// 클래스의   추가 :  쉽다. OCP 를 만족하게 설계 했다면!
// 가상함수의 추가 :  어렵다, 기존의 이미 만든 모든 클래스 코드가 수정되어야 한다.



// 그런데, Move()라는 가상함수를 추가하지말고!!
ShapeMoveVisitor v;
컨테이너.accept(&v); // 이렇게 하면 ??


// 방문자 패턴으로 디자인 하면
// 클래스의 추가   : 어렵다. 
//					visitor3 예제에서 새로운 메뉴가 추가되면
//					IVisitor (방문자 인터페이스)가 변경됩니다.
//					기존에 만든 모든 방문자를 수정해야 합니다.
// 
// 가상 함수의 추가 : 쉽다.. 진짜 가상함수가 아니라
//					가상함수가 할일을 방문자로!! 하면된다는 것!
//					



